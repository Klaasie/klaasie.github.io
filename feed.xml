<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://www.klaas.frl/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.klaas.frl/" rel="alternate" type="text/html" /><updated>2023-04-10T21:38:40+00:00</updated><id>https://www.klaas.frl/feed.xml</id><title type="html">Klaas Poortinga</title><subtitle>Welcome to my personal portfolio website.</subtitle><author><name>Klaas Poortinga</name></author><entry><title type="html">Apache Solr for Laravel Scout</title><link href="https://www.klaas.frl/projects/2021/09/23/apache-solr-for-laravel-scout.html" rel="alternate" type="text/html" title="Apache Solr for Laravel Scout" /><published>2021-09-23T00:00:00+00:00</published><updated>2021-09-23T00:00:00+00:00</updated><id>https://www.klaas.frl/projects/2021/09/23/apache-solr-for-laravel-scout</id><content type="html" xml:base="https://www.klaas.frl/projects/2021/09/23/apache-solr-for-laravel-scout.html">&lt;p&gt;If you’re a &lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt; developer, you’ve probably heard of Laravel Scout – a package that makes it easy to add full-text search to your Laravel applications. In this post, I’ll share my experience with &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Apache Solr&lt;/a&gt; and explain why I created the &lt;a href=&quot;https://github.com/Klaasie/laravel-scout-solr-engine&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klaasie/scout-solr-engine&lt;/code&gt;&lt;/a&gt; package, which offers a Laravel Scout implementation for Solr.&lt;/p&gt;

&lt;h2 id=&quot;my-experience-with-apache-solr&quot;&gt;My Experience with Apache Solr&lt;/h2&gt;

&lt;p&gt;Before I dive into the package, let me tell you a bit about my experience with Apache Solr. I work on enterprise-level applications, and Solr is a popular choice in that space. I started using Solr a few years ago and was blown away by its power and versatility.&lt;/p&gt;

&lt;p&gt;Solr is based on Apache Lucene, a powerful search library that’s widely used in the industry. Solr provides a ton of features out of the box, including faceted search, spatial search, and more. And it’s designed to scale horizontally, so you can add more nodes to your cluster as your data grows and your search traffic increases.&lt;/p&gt;

&lt;p&gt;Setting up Solr can be a bit of a challenge, especially if you’re not familiar with it. But once you get it up and running, it’s a joy to work with. The Solr API is well-documented and easy to use, and the community is active and helpful.&lt;/p&gt;

&lt;h2 id=&quot;creating-klaasiescout-solr-engine&quot;&gt;Creating klaasie/scout-solr-engine&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, I work with Laravel, and I wanted to use Solr with it. However, I couldn’t find a Laravel Scout implementation for Solr that was up to date and met my needs. So, I decided to create one myself – and thus, the &lt;a href=&quot;https://github.com/Klaasie/laravel-scout-solr-engine&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klaasie/scout-solr-engine&lt;/code&gt;&lt;/a&gt; package was born.&lt;/p&gt;

&lt;p&gt;The package offers an easy-to-use interface for integrating Solr with Laravel Scout. It handles indexing and searching of your models, and provides a fluent API for building advanced search queries. It also supports features like faceted search and highlighting out of the box.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;Laravel Scout is a fantastic package that makes it easy to add search functionality to your Laravel applications. And with options like &lt;a href=&quot;https://www.algolia.com/&quot;&gt;Algolia&lt;/a&gt;, &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt;, &lt;a href=&quot;https://www.meilisearch.com/&quot;&gt;MeiliSearch&lt;/a&gt;, &lt;a href=&quot;https://github.com/teamtnt/laravel-scout-tntsearch-driver&quot;&gt;TNTSearch&lt;/a&gt;, and Solr, you’re sure to find a search engine that meets your needs. For me, Apache Solr has been a great choice, thanks to its powerful features and scalability. And with the &lt;a href=&quot;https://github.com/Klaasie/laravel-scout-solr-engine&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;klaasie/scout-solr-engine&lt;/code&gt;&lt;/a&gt; package, integrating Solr with Laravel Scout has never been easier.&lt;/p&gt;</content><author><name>Klaas Poortinga</name></author><category term="Projects" /><category term="Packages" /><category term="PHP" /><category term="Laravel" /><summary type="html">If you’re a Laravel developer, you’ve probably heard of Laravel Scout – a package that makes it easy to add full-text search to your Laravel applications. In this post, I’ll share my experience with Apache Solr and explain why I created the klaasie/scout-solr-engine package, which offers a Laravel Scout implementation for Solr. My Experience with Apache Solr Before I dive into the package, let me tell you a bit about my experience with Apache Solr. I work on enterprise-level applications, and Solr is a popular choice in that space. I started using Solr a few years ago and was blown away by its power and versatility. Solr is based on Apache Lucene, a powerful search library that’s widely used in the industry. Solr provides a ton of features out of the box, including faceted search, spatial search, and more. And it’s designed to scale horizontally, so you can add more nodes to your cluster as your data grows and your search traffic increases. Setting up Solr can be a bit of a challenge, especially if you’re not familiar with it. But once you get it up and running, it’s a joy to work with. The Solr API is well-documented and easy to use, and the community is active and helpful. Creating klaasie/scout-solr-engine As I mentioned earlier, I work with Laravel, and I wanted to use Solr with it. However, I couldn’t find a Laravel Scout implementation for Solr that was up to date and met my needs. So, I decided to create one myself – and thus, the klaasie/scout-solr-engine package was born. The package offers an easy-to-use interface for integrating Solr with Laravel Scout. It handles indexing and searching of your models, and provides a fluent API for building advanced search queries. It also supports features like faceted search and highlighting out of the box. Wrapping Up Laravel Scout is a fantastic package that makes it easy to add search functionality to your Laravel applications. And with options like Algolia, Elasticsearch, MeiliSearch, TNTSearch, and Solr, you’re sure to find a search engine that meets your needs. For me, Apache Solr has been a great choice, thanks to its powerful features and scalability. And with the klaasie/scout-solr-engine package, integrating Solr with Laravel Scout has never been easier.</summary></entry><entry><title type="html">Keep Slim App</title><link href="https://www.klaas.frl/projects/2021/09/20/keep-slim-app.html" rel="alternate" type="text/html" title="Keep Slim App" /><published>2021-09-20T00:00:00+00:00</published><updated>2021-09-20T00:00:00+00:00</updated><id>https://www.klaas.frl/projects/2021/09/20/keep-slim-app</id><content type="html" xml:base="https://www.klaas.frl/projects/2021/09/20/keep-slim-app.html">&lt;p&gt;During my free time I ran across a relatively new programming framework called &lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;.
Flutter is an open source framework for developing multi-platform apps. At the time of writing both Android and iOS are supported. Flutter uses dart as its coding language.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;In my spare time I like to occasionally experiment with new and upcoming frameworks. Having been frustrated by most of the calorie counting apps, that make dieting feel like a chore, I decided to try and build a small calorie counting app adding some kind of gamification to the process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=frl.klaas.diet&quot;&gt;Keep slim&lt;/a&gt; is the result of this experiment. An app that gives you a stick figure that you’ll have to try and keep slim.
The app allows manual input, or pick from a list of favorites. You can set your own body “breakpoints”, these breakpoints are the points at which your stick figure will start growing.&lt;br /&gt;
For ease of adding food, a barcode scanner is part of this app, allowing you to get calorie information from the &lt;a href=&quot;https://world.openfoodfacts.org/&quot;&gt;the open food facts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This app will be a daily challenge, every day the stick figure will reset and you get to try and keep it slim and healthy!&lt;/p&gt;

&lt;div class=&quot;not-prose&quot;&gt;
    &lt;ul class=&quot;flex flex-wrap items-center justify-center&quot;&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/main.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/main.jpg&quot; alt=&quot;Happy and healthy stickfigure.&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/new-food.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/new-food.jpg&quot; alt=&quot;Adding new food&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/favorite-food.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/favorite-food.jpg&quot; alt=&quot;List of favorite food&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/fat.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/fat.jpg&quot; alt=&quot;This stick figure has grown considerably in size!&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/belly-content.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/belly-content.jpg&quot; alt=&quot;Content of the belly&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
            &lt;li class=&quot;w-full md:w-1/2 lg:w-1/2 xl:w-1/3&quot;&gt;
                &lt;a data-fslightbox=&quot;&quot; href=&quot;/images/keep-slim/settings.jpg&quot;&gt;
                    &lt;img class=&quot;rounded-lg px-8 py-8 xl:px-4 xl:py-4 &quot; src=&quot;/images/keep-slim/settings.jpg&quot; alt=&quot;Settings view&quot; /&gt;
                &lt;/a&gt;
            &lt;/li&gt;
        
    &lt;/ul&gt;
&lt;/div&gt;</content><author><name>Klaas Poortinga</name></author><category term="Projects" /><category term="Apps" /><category term="Flutter" /><summary type="html">During my free time I ran across a relatively new programming framework called Flutter. Flutter is an open source framework for developing multi-platform apps. At the time of writing both Android and iOS are supported. Flutter uses dart as its coding language.</summary></entry></feed>